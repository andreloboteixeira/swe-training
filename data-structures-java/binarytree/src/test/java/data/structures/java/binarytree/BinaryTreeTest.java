/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package data.structures.java.binarytree;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class BinaryTreeTest {
    @Test void testAllLeftTreeNodes(){
        BinaryTree bt = new BinaryTree();

        bt.insertNode(5);
        bt.insertNode(4);
        bt.insertNode(3);
        bt.insertNode(2);
        bt.insertNode(1);
        System.out.println("\n>>> printPreorder");
        bt.printPreorder();
        System.out.println("\n>>> printInorder");
        bt.printInorder();
        System.out.println("\n>>> printPostorder");
        bt.printPostorder();

        assertNotNull(bt.root);
        assertNotNull(bt.root.left);
        assertNotNull(bt.root.left.left);
        assertNotNull(bt.root.left.left.left);
        assertNotNull(bt.root.left.left.left.left);

        assertNull(bt.root.right);
        assertNull(bt.root.left.right);
        assertNull(bt.root.left.left.right);
        assertNull(bt.root.left.left.left.right);
        assertNull(bt.root.left.left.left.left.right);
        assertNull(bt.root.left.left.left.left.left);

        assertTrue(bt.containsNode(5), "does not contain node 5");
        assertTrue(bt.containsNode(4), "does not contain node 4");
        assertTrue(bt.containsNode(3), "does not contain node 3");
        assertTrue(bt.containsNode(2), "does not contain node 2");
        assertTrue(bt.containsNode(1), "does not contain node 1");
        assertFalse(bt.containsNode(6), "should not contain node 6");
        assertFalse(bt.containsNode(-1), "should not contain node -1");

    }

    @Test void testAllRightTreeNodes(){
        BinaryTree bt = new BinaryTree();

        bt.insertNode(1);
        bt.insertNode(2);
        bt.insertNode(3);
        bt.insertNode(4);
        bt.insertNode(5);

        System.out.println("\n>>> printPreorder");
        bt.printPreorder();
        System.out.println("\n>>> printInorder");
        bt.printInorder();
        System.out.println("\n>>> printPostorder");
        bt.printPostorder();

        assertNotNull(bt.root);
        assertNotNull(bt.root.right);
        assertNotNull(bt.root.right.right);
        assertNotNull(bt.root.right.right.right);
        assertNotNull(bt.root.right.right.right.right);

        assertNull(bt.root.left);
        assertNull(bt.root.right.left);
        assertNull(bt.root.right.right.left);
        assertNull(bt.root.right.right.right.left);
        assertNull(bt.root.right.right.right.right.right);
        assertNull(bt.root.right.right.right.right.left);

        assertTrue(bt.containsNode(5), "does not contain node 5");
        assertTrue(bt.containsNode(4), "does not contain node 4");
        assertTrue(bt.containsNode(3), "does not contain node 3");
        assertTrue(bt.containsNode(2), "does not contain node 2");
        assertTrue(bt.containsNode(1), "does not contain node 1");
        assertFalse(bt.containsNode(6), "should not contain node 6");
        assertFalse(bt.containsNode(-1), "should not contain node -1");
    }

    @Test void testDeleteElementWithTwoChildren(){
        BinaryTree bt = new BinaryTree();

        bt.insertNode(4);
        bt.insertNode(2);
        bt.insertNode(3);
        bt.insertNode(1);

        System.out.println("\n\nBefore deletion");
        System.out.println("\n>>> printPreorder");
        bt.printPreorder();
        System.out.println("\n>>> printInorder");
        bt.printInorder();
        System.out.println("\n>>> printPostorder");
        bt.printPostorder();

        assertTrue(bt.containsNode(2), "does not contain 2");

        bt.deleteNode(2);

        assertFalse(bt.containsNode(2), "node 2 was not deleted");

        System.out.println("\n\nAfter deletion");
        System.out.println("\n>>> printPreorder");
        bt.printPreorder();
        System.out.println("\n>>> printInorder");
        bt.printInorder();
        System.out.println("\n>>> printPostorder");
        bt.printPostorder();

    }

    @Test void testDeleteElementInTheMiddleOfTree(){
        BinaryTree bt = new BinaryTree();

        bt.insertNode(6);
        bt.insertNode(4);
        bt.insertNode(8);

        bt.insertNode(3);
        bt.insertNode(5);
        bt.insertNode(7);
        bt.insertNode(9);

        bt.insertNode(1);

        System.out.println("\n\nBefore deletion");
        System.out.println("\n>>> printPreorder");
        bt.printPreorder();
        System.out.println("\n>>> printInorder");
        bt.printInorder();
        System.out.println("\n>>> printPostorder");
        bt.printPostorder();

        assertTrue(bt.containsNode(4), "does not contain 4");

        bt.deleteNode(4);

        assertFalse(bt.containsNode(4), "node 4 was not deleted");

        System.out.println("\n\nAfter deletion");
        System.out.println("\n>>> printPreorder");
        bt.printPreorder();
        System.out.println("\n>>> printInorder");
        bt.printInorder();
        System.out.println("\n>>> printPostorder");
        bt.printPostorder();

    }
}
